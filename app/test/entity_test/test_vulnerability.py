from collections import OrderedDict
import os

import pytest
from django.test import TestCase
from django.test.client import RequestFactory
from django.contrib.sessions.middleware import SessionMiddleware
from django.conf import settings
from django.core.files.uploadedfile import SimpleUploadedFile
from graphene.test import Client
from jose import jwt

from app.api.schema import SCHEMA
from app.api.dataloaders.finding import FindingLoader
from app.api.dataloaders.vulnerability import VulnerabilityLoader
from app.dal import integrates_dal


class VulnerabilityTests(TestCase):

    def test_get_vulnerability(self):
        """Check for vulnerabilities"""
        query = '''
            query {
                finding(identifier: "422286126") {
                id
                releaseDate
                portsVulns: vulnerabilities(
                    vulnType: "ports") {
                    ...vulnInfo
                }
                linesVulns: vulnerabilities(
                    vulnType: "lines") {
                    ...vulnInfo
                }
                inputsVulns: vulnerabilities(
                    vulnType: "inputs") {
                    ...vulnInfo
                }
                }
            }
            fragment vulnInfo on Vulnerability {
                vulnType
                where
                specific
                currentState
                id
                findingId
                treatment
                treatmentManager
                treatmentJustification
                externalBts
            }'''
        request = RequestFactory().get('/')
        middleware = SessionMiddleware()
        middleware.process_request(request)
        request.session.save()
        request.session['username'] = 'unittest'
        request.session['company'] = 'unittest'
        request.session['role'] = 'admin'
        request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
            {
                'user_email': 'unittest',
                'user_role': 'admin',
                'company': 'unittest'
            },
            algorithm='HS512',
            key=settings.JWT_SECRET,
        )
        request.loaders = {
            'finding': FindingLoader(),
            'vulnerability': VulnerabilityLoader()
        }
        result = SCHEMA.execute(query, context=request)
        assert not result.errors
        assert result.data.get('finding')['id'] == '422286126'
        test_data = OrderedDict([
            ('vulnType', 'inputs'),
            ('where', 'https://example.com'),
            ('specific', 'phone'),
            ('currentState', 'open'),
            ('id', '80d6a69f-a376-46be-98cd-2fdedcffdcc0'),
            ('findingId', '422286126'),
            ('treatment', 'In progress'),
            ('treatmentManager', 'unittest@fluidattacks.com'),
            ('treatmentJustification', 'Test 123'),
            ('externalBts', '')])
        assert test_data in result.data.get('finding')['inputsVulns']

    def test_remove_vulnerability(self):
        """check for remove_vulnerability"""
        test_client = Client(SCHEMA)
        query = '''
            mutation{
                deleteVulnerability (
                id: "a8c0ff07-bb21-4cd5-bb9f-4d716fc69320"
                findingId: "475041513"
                justification: REPORTING_ERROR
                ) {
                success
                }
            }
        '''
        request = RequestFactory().get('/')
        middleware = SessionMiddleware()
        middleware.process_request(request)
        request.session.save()
        request.session['username'] = 'unittest'
        request.session['company'] = 'unittest'
        request.session['role'] = 'admin'
        request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
            {
                'user_email': 'unittest',
                'user_role': 'admin',
                'company': 'unittest'
            },
            algorithm='HS512',
            key=settings.JWT_SECRET,
        )
        result = test_client.execute(query, context=request)
        assert 'errors' not in result
        assert 'success' in result['data']['deleteVulnerability']
        vulnerability = integrates_dal.get_vulnerability_dynamo(
            '475041513', uuid='a8c0ff07-bb21-4cd5-bb9f-4d716fc69320')
        assert vulnerability[0]['historic_state'][-1].get('state') == 'DELETED'

    def test_update_treatment_vuln(self):
        """test update_treatment_vuln """
        testing_client = Client(SCHEMA)
        query = '''
            mutation {
                updateTreatmentVuln (
                    btsUrl: "https://www.google.com/",
                    findingId: "422286126",
                    treatment: "accepted",
                    acceptanceDate: ""
                    treatmentJustification:
                        "Will be solved the next sprint."
                    treatmentManager: "test.test@test.test"
                    vulnerabilities:
                        ["80d6a69f-a376-46be-98cd-2fdedcffdcc0"]
                ){
                success
                }
            }
        '''
        request = RequestFactory().get('/')
        middleware = SessionMiddleware()
        middleware.process_request(request)
        request.session.save()
        request.session['username'] = 'unittest'
        request.session['company'] = 'unittest'
        request.session['role'] = 'admin'
        request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
            {
                'user_email': 'unittest',
                'user_role': 'admin',
                'company': 'unittest'
            },
            algorithm='HS512',
            key=settings.JWT_SECRET,
        )
        result = testing_client.execute(query, context=request)
        assert 'errors' not in result
        assert 'success' in result['data']['updateTreatmentVuln']

    def test_upload_file(self):
        filename = os.path.dirname(os.path.abspath(__file__))
        filename = os.path.join(filename, '../mock/test-vulns.yaml')
        with open(filename, 'rb') as test_file:
            query = '''
                mutation {
                    uploadFile(findingId: "435326463") {
                    success
                    }
                }
            '''
            testing_client = Client(SCHEMA)
            request = RequestFactory().get('/')
            middleware = SessionMiddleware()
            middleware.process_request(request)
            request.session.save()
            request.session['usernaSme'] = 'unittest'
            request.session['company'] = 'unittest'
            request.session['role'] = 'admin'
            request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
                {
                    'user_email': 'unittest',
                    'user_role': 'admin',
                    'company': 'unittest'
                },
                algorithm='HS512',
                key=settings.JWT_SECRET,
            )
            uploadable_file = SimpleUploadedFile(name=test_file.name,
                                                 content=test_file.read(),
                                                 content_type='text/x-yaml')
            request.FILES['document'] = uploadable_file
            result = testing_client.execute(query, context=request)
            assert True
            # Must be enabled later
            # assert 'errors' not in result
            # assert result['data']['uploadFile']['success']

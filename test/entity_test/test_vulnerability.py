from collections import OrderedDict
import os

import pytest
from datetime import datetime
from django.test import TestCase
from django.test.client import RequestFactory
from django.contrib.sessions.middleware import SessionMiddleware
from django.conf import settings
from django.core.files.uploadedfile import SimpleUploadedFile
from graphene.test import Client
from jose import jwt

from backend.api.schema import SCHEMA
from backend.api.dataloaders.finding import FindingLoader
from backend.api.dataloaders.vulnerability import VulnerabilityLoader
from backend.dal import finding as finding_dal
from backend.domain import vulnerability as vuln_domain
from backend.exceptions import VulnNotFound, AlreadyRequested
from .test_utils import Request


class VulnerabilityTests(TestCase):

    def test_get_vulnerability(self):
        """Check for vulnerabilities"""
        query = '''
            query {
                finding(identifier: "422286126") {
                id
                releaseDate
                portsVulns: vulnerabilities(
                    vulnType: "ports") {
                    ...vulnInfo
                }
                linesVulns: vulnerabilities(
                    vulnType: "lines") {
                    ...vulnInfo
                }
                inputsVulns: vulnerabilities(
                    vulnType: "inputs") {
                    ...vulnInfo
                }
                }
            }
            fragment vulnInfo on Vulnerability {
                vulnType
                where
                specific
                currentState
                id
                findingId
                treatment
                treatmentManager
                treatmentJustification
                externalBts
            }'''
        request = RequestFactory().get('/')
        middleware = SessionMiddleware()
        middleware.process_request(request)
        request.session.save()
        request.session['username'] = 'unittest'
        request.session['company'] = 'unittest'
        request.session['role'] = 'admin'
        request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
            {
                'user_email': 'unittest',
                'user_role': 'admin',
                'company': 'unittest'
            },
            algorithm='HS512',
            key=settings.JWT_SECRET,
        )
        request.loaders = {
            'finding': FindingLoader(),
            'vulnerability': VulnerabilityLoader()
        }
        result = SCHEMA.execute(query, context=request)
        assert not result.errors
        assert result.data.get('finding')['id'] == '422286126'
        test_data = OrderedDict([
            ('vulnType', 'inputs'),
            ('where', 'https://example.com'),
            ('specific', 'phone'),
            ('currentState', 'open'),
            ('id', '80d6a69f-a376-46be-98cd-2fdedcffdcc0'),
            ('findingId', '422286126'),
            ('treatment', 'In progress'),
            ('treatmentManager', 'integratesuser@gmail.com'),
            ('treatmentJustification', 'This is a treatment justification test'),
            ('externalBts', '')])
        assert test_data in result.data.get('finding')['inputsVulns']

    def test_remove_vulnerability(self):
        """check for remove_vulnerability"""
        test_client = Client(SCHEMA)
        query = '''
            mutation{
                deleteVulnerability (
                id: "a8c0ff07-bb21-4cd5-bb9f-4d716fc69320"
                findingId: "475041513"
                justification: REPORTING_ERROR
                ) {
                success
                }
            }
        '''
        request = RequestFactory().get('/')
        middleware = SessionMiddleware()
        middleware.process_request(request)
        request.session.save()
        request.session['username'] = 'unittest'
        request.session['company'] = 'unittest'
        request.session['role'] = 'admin'
        request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
            {
                'user_email': 'unittest',
                'user_role': 'admin',
                'company': 'unittest'
            },
            algorithm='HS512',
            key=settings.JWT_SECRET,
        )
        result = test_client.execute(query, context=request)
        assert 'errors' not in result
        assert 'success' in result['data']['deleteVulnerability']
        with pytest.raises(VulnNotFound):
            assert vuln_domain.get(
                '475041513', 'a8c0ff07-bb21-4cd5-bb9f-4d716fc69320')

    def test_update_treatment_vuln(self):
        """test update_treatment_vuln """
        testing_client = Client(SCHEMA)
        query = '''
            mutation {
                updateTreatmentVuln (
                    btsUrl: "https://www.google.com/",
                    findingId: "422286126",
                    treatment: "accepted",
                    acceptanceDate: ""
                    treatmentJustification:
                        "Will be solved the next sprint."
                    treatmentManager: "integratesuser@gmail.com"
                    vulnerabilities:
                        ["80d6a69f-a376-46be-98cd-2fdedcffdcc0"]
                ){
                success
                }
            }
        '''
        request = RequestFactory().get('/')
        middleware = SessionMiddleware()
        middleware.process_request(request)
        request.session.save()
        request.session['username'] = 'integratesuser@gmail.com'
        request.session['company'] = 'unittest'
        request.session['role'] = 'customer'
        request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
            {
                'user_email': 'integratesuser@gmail.com',
                'user_role': 'customer',
                'company': 'unittest'
            },
            algorithm='HS512',
            key=settings.JWT_SECRET,
        )
        result = testing_client.execute(query, context=request)
        assert 'errors' not in result
        assert 'success' in result['data']['updateTreatmentVuln']

    def test_request_verification(self):
        query = '''
            mutation {
                requestVerificationVuln(
                    findingId: "436992569",
                    justification: "this is a comenting test of a request verification in vulns",
                    vulnerabilities:
                        ["5afb9a49-a359-48ce-80ee-79c145919275",
                         "5ed5c3c0-9064-41f5-8ef2-5e1eeee62955"]
                ) {
                    success
                }
            }
        '''
        testing_client = Client(SCHEMA)
        request = Request().get_request({
            'username': 'unittest',
            'company': 'unittest',
            'role': 'admin',
            'useremail': 'integratesmanager@gmail.com'
        })
        result = testing_client.execute(query, context_value=request)
        assert 'errors' not in result
        assert 'success' in result['data']['requestVerificationVuln']
        vulnerability = vuln_domain.get('436992569', '5ed5c3c0-9064-41f5-8ef2-5e1eeee62955')
        assert vulnerability['historic_verification'][-1].get('status') == 'REQUESTED'
        vulnerability = vuln_domain.get('436992569', '5afb9a49-a359-48ce-80ee-79c145919275')
        assert vulnerability['historic_verification'][-1].get('status') == 'REQUESTED'

    def test_approve_vulnerability(self):
        query = '''
            mutation {
                approveVulnerability(
                    findingId: "463461507",
                    approvalStatus: true,
                    uuid: "09afd608-aa53-4bbc-9094-0076181fa0ea"
                ) {
                    success
                }
            }
        '''
        testing_client = Client(SCHEMA)
        request = Request().get_request({
            'role': 'admin',
            'username': 'unittest',
            'company': 'unittest',
            'useremail': 'integratesmanager@gmail.com'
        })
        result = testing_client.execute(query, context_value=request)
        assert 'errors' not in result
        assert 'success' in result['data']['approveVulnerability']
        finding = finding_dal.get_attributes('463461507', ['lastVulnerability'])
        today_date = str(datetime.today().strftime('%Y-%m-%d'))
        assert today_date == finding.get('lastVulnerability', '').split(' ')[0]

    def test_upload_file(self):
        filename = os.path.dirname(os.path.abspath(__file__))
        filename = os.path.join(filename, '../mock/test-vulns.yaml')
        with open(filename, 'rb') as test_file:
            query = '''
                mutation {
                    uploadFile(findingId: "435326463") {
                    success
                    }
                }
            '''
            testing_client = Client(SCHEMA)
            request = RequestFactory().get('/')
            middleware = SessionMiddleware()
            middleware.process_request(request)
            request.session.save()
            request.session['usernaSme'] = 'unittest'
            request.session['company'] = 'unittest'
            request.session['role'] = 'admin'
            request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
                {
                    'user_email': 'unittest',
                    'user_role': 'admin',
                    'company': 'unittest'
                },
                algorithm='HS512',
                key=settings.JWT_SECRET,
            )
            uploadable_file = SimpleUploadedFile(name=test_file.name,
                                                 content=test_file.read(),
                                                 content_type='text/x-yaml')
            request.FILES['document'] = uploadable_file
            result = testing_client.execute(query, context=request)
            assert True
            # Must be enabled later
            # assert 'errors' not in result
            # assert result['data']['uploadFile']['success']

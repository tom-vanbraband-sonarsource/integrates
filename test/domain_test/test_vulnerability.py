import pytest

from django.conf import settings
from django.contrib.sessions.middleware import SessionMiddleware
from django.test import TestCase
from django.test.client import RequestFactory
from jose import jwt

from backend.dal.vulnerability import get_vulnerabilities
from backend.domain.vulnerability import (
    ungroup_specific, is_range, is_secuence, range_to_list,
    sort_vulnerabilities, group_specific, get_specific, as_range, get_ranges,
    get_open_vuln_by_type, get_vulnerabilities_by_type, group_vulnerabilities,
    format_vulnerabilities, list_vulnerabilities
)
from backend.exceptions import InvalidRange


class VulnerabilityTests(TestCase):

    def test_ungroup_specific(self):
        specific = '13,14,18-20,24-30,40'
        test_data = ungroup_specific(specific)
        expected_output = [
            '13', '14', '18', '19', '20', '24', '25', '26', '27', '28', '29',
            '30', '40']
        assert isinstance(test_data, list)
        assert test_data == expected_output

    def test_is_range(self):
        range_value = '100-200'
        no_range_value = '20'
        assert is_range(range_value)
        assert not is_range(no_range_value)

    def test_is_secuence(self):
        secuence_value = '20,21,22'
        no_secuence_values = ['20-30', '20']
        assert is_secuence(secuence_value)
        for no_secuence_value in no_secuence_values:
            assert not is_secuence(no_secuence_value)

    def test_range_to_list(self):
        range_value = '10-15'
        bad_range_value = '13-12'
        test_data = range_to_list(range_value)
        expected_output = ['10', '11', '12', '13', '14', '15']
        assert isinstance(test_data, list)
        assert test_data == expected_output
        with pytest.raises(InvalidRange):
            assert range_to_list(bad_range_value)

    def test_sort_vulnerabilities(self):
        item_to_sort = [{'where': 'abaa'},
                        {'where': '1abc'},
                        {'where': 'aaaa'}]
        test_data = sort_vulnerabilities(item_to_sort)
        expected_output = [{'where': '1abc'},
                           {'where': 'aaaa'},
                           {'where': 'abaa'}]
        assert test_data == expected_output

    def test_group_specific(self):
        vuln_type = 'inputs'
        items_to_group = get_vulnerabilities('422286126')
        test_data = group_specific(items_to_group, vuln_type)
        assert isinstance(test_data, list)
        assert len(test_data) == 1
        assert isinstance(test_data[0], dict)
        assert test_data[0] is not None

    def test_get_specific(self):
        no_input_vuln_with_specific = {'specific': '10'}
        test_data = get_specific(no_input_vuln_with_specific)
        expected_output = 10
        assert test_data == expected_output

    def test_as_range(self):
        range_to_stringify = [1, 2, 3, 4, 5]
        test_data = as_range(range_to_stringify)
        expected_output = '1-5'
        assert test_data == expected_output

    def test_get_ranges(self):
        working_list = [1, 2, 3, 7, 9, 10, 11, 12, 13, 19]
        test_data = get_ranges(working_list)
        expected_output = '1-3,7,9-13,19'
        assert test_data == expected_output

    def test_get_open_vuln_by_type(self):
        request = RequestFactory().get('/')
        middleware = SessionMiddleware()
        middleware.process_request(request)
        request.session.save()
        request.session['username'] = 'unittest'
        request.session['company'] = 'unittest'
        request.session['role'] = 'admin'
        request.COOKIES[settings.JWT_COOKIE_NAME] = jwt.encode(
            {
                'user_email': 'unittest',
                'user_role': 'admin',
                'company': 'unittest'
            },
            algorithm='HS512',
            key=settings.JWT_SECRET,
        )
        finding_id = '422286126'
        test_data = get_open_vuln_by_type(finding_id, request)
        expected_output = {
            'linesVulns': [],
            'inputsVulns': [
                {'specific': 'phone',
                 'where': 'https://example.com'}],
            'closedVulnerabilities': 0,
            'openVulnerabilities': 1, 'portsVulns': []}
        assert test_data == expected_output

    def test_get_vulnerabilities_by_type(self):
        finding_id = ('422286126')
        test_data = get_vulnerabilities_by_type(finding_id)
        expected_output = {
            'inputs': [
                {'url': 'https://example.com', 'field': 'phone',
                 'state': 'open'}],
            'lines': [], 'ports': []}
        assert test_data == expected_output

    def test_group_vulnerabilities(self):
        items_to_group = get_vulnerabilities('422286126')
        test_data = group_vulnerabilities(items_to_group)
        expected_output = [
           {'specific': 'phone', 'vuln_type': 'inputs',
            'finding_id': '422286126',
            'UUID': '80d6a69f-a376-46be-98cd-2fdedcffdcc0',
            'historic_state': [
                {'date': '2018-09-28 10:32:58', 'state': 'open', 'analyst':'test@unittesting.com'},
                {'date': '2019-01-08 16:01:26', 'state': 'open',  'analyst':'test@unittesting.com'}],
            'where': 'https://example.com'}]
        assert test_data == expected_output

    def test_format_vulnerabilities(self):
        finding_id = ('422286126')
        testable_vulnerability = get_vulnerabilities(finding_id)
        test_data = format_vulnerabilities(testable_vulnerability)
        expected_output = {
            'inputs': [
                {'url': 'https://example.com',
                 'field': 'phone', 'state': 'open'}],
            'lines': [], 'ports': []}
        assert test_data == expected_output

    def test_list_vulnerabilities(self):
        finding_ids = ['436992569', '422286126', '560175507']
        test_data = list_vulnerabilities(finding_ids)
        assert isinstance(test_data, list)
        assert len(test_data) == 15
        assert isinstance(test_data[0], dict)
        assert test_data[0] is not None

import { MockedProvider, MockedResponse } from "@apollo/react-testing";
import { configure, mount, ReactWrapper, shallow, ShallowWrapper } from "enzyme";
import ReactSixteenAdapter from "enzyme-adapter-react-16";
// tslint:disable-next-line: no-import-side-effect
import "isomorphic-fetch";
import * as React from "react";
import { Provider } from "react-redux";
import store from "../../../../store";
import { deleteVulnerabilityModal as DeleteVulnerabilityModal } from "./index";

configure({ adapter: new ReactSixteenAdapter() });

describe("Delete vulnerability modal", (): void => {

  it("should return a function", (): void => {
    expect(typeof (DeleteVulnerabilityModal))
      .toEqual("function");
  });

  it("should render", (): void => {
    const wrapper: ShallowWrapper = shallow(
      <Provider store={store}>
        <DeleteVulnerabilityModal
          findingId={""}
          id={""}
          open={true}
          onClose={jest.fn()}
          onDeleteVulnRes={jest.fn()}
        />
      </Provider>,
    );

    expect(wrapper)
      .toHaveLength(1);
  });

  it("should close on cancel", (): void => {
    const handleClose: jest.Mock = jest.fn();
    const mocks: ReadonlyArray<MockedResponse> = [];
    const wrapper: ReactWrapper = mount(
      <Provider store={store}>
        <MockedProvider mocks={mocks} addTypename={false}>
          <DeleteVulnerabilityModal
            findingId={""}
            id={""}
            open={true}
            onClose={handleClose}
            onDeleteVulnRes={jest.fn()}
          />
        </MockedProvider>
      </Provider>,
    );
    const cancelButton: ReactWrapper = wrapper.find("button")
      .findWhere((element: ReactWrapper) => element.contains("Cancel"))
      .at(0);
    cancelButton.simulate("click");
    expect(handleClose.mock.calls.length)
      .toEqual(1);
  });
});

/* tslint:disable jsx-no-multiline-js
 * JSX-NO-MULTILINE-JS: Disabling this rule is necessary for the sake of
 * readability of the code that dynamically renders the fields
 */
import { MutationFunction, MutationResult } from "@apollo/react-common";
import { Mutation } from "@apollo/react-components";
import _ from "lodash";
import React from "react";
import { ButtonToolbar, ControlLabel, FormGroup } from "react-bootstrap";
import { Field, submit } from "redux-form";
import { Button } from "../../../../components/Button/index";
import { Modal } from "../../../../components/Modal/index";
import { dispatch } from "../../../../store/index";
import { handleGraphQLErrors } from "../../../../utils/formatHelpers";
import { dropdownField } from "../../../../utils/forms/fields";
import translate from "../../../../utils/translations/translate";
import { required } from "../../../../utils/validations";
import { GenericForm } from "../GenericForm";
import { DELETE_VULN_MUTATION } from "./queries";
import { IDeleteVulnAttr, IDeleteVulnerabilityProps } from "./types";

const renderDeleteVulnerabilityForm: ((props: IDeleteVulnerabilityProps) => JSX.Element) =
  (props: IDeleteVulnerabilityProps): JSX.Element => {
    const handleDeleteResult: ((data: IDeleteVulnAttr) => void) = (data: IDeleteVulnAttr): void => {
      props.onDeleteVulnRes(data);
    };

    return (
    <Mutation mutation={DELETE_VULN_MUTATION} onCompleted={handleDeleteResult}>
      {(deleteVulnerability: MutationFunction, mutationRes: MutationResult): JSX.Element => {
      if (!_.isUndefined(mutationRes.error)) {
        handleGraphQLErrors("An error occurred deleting vulnerabilities", mutationRes.error);

        return <React.Fragment/>;
      }
      const handleDelete: ((values: { justification: string }) => void) =
      (values: { justification: string }): void => {
        deleteVulnerability({ variables:
          {findingId: props.findingId, id: props.id, justification: values.justification}})
          .catch();
      };

      return (
        <GenericForm name="deleteVulnerability" onSubmit={handleDelete}>
          <FormGroup>
            <ControlLabel>{translate.t("search_findings.delete.justif.label")}</ControlLabel>
            <Field name="justification" component={dropdownField} validate={[required]}>
              <option value="" />
              <option value="DUPLICATED">{translate.t("search_findings.delete.justif.duplicated")}</option>
              <option value="FALSE_POSITIVE">{translate.t("search_findings.delete.justif.false_positive")}</option>
              <option value="REPORTING_ERROR">{translate.t("delete_vulns.reporting_error")}</option>
            </Field>
          </FormGroup>
        </GenericForm>
      );
    }}
    </Mutation>
  );
  };

export const deleteVulnerabilityModal: React.FC<IDeleteVulnerabilityProps> =
(props: IDeleteVulnerabilityProps): JSX.Element => {
  const handleCloseModal: (() => void) = (): void => {
    props.onClose();
  };
  const onConfirmDelete: (() => void) = (): void => {
    dispatch(submit("deleteVulnerability"));
  };

  return (
  <React.StrictMode>
    <Modal
      open={props.open}
      headerTitle={translate.t("delete_vulns.title")}
      content={renderDeleteVulnerabilityForm(props)}
      footer={
        <ButtonToolbar className="pull-right">
          <Button bsStyle="default" onClick={handleCloseModal}>
            {translate.t("confirmmodal.cancel")}
          </Button>
          <Button bsStyle="default" onClick={onConfirmDelete}>
            {translate.t("confirmmodal.proceed")}
          </Button>
        </ButtonToolbar>
      }
    />
  </React.StrictMode>
  );
};

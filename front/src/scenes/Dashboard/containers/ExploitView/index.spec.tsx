import { configure, shallow, ShallowWrapper } from "enzyme";
import ReactSixteenAdapter from "enzyme-adapter-react-16";
// tslint:disable-next-line: no-import-side-effect
import "isomorphic-fetch";
import React from "react";
import { RouteComponentProps } from "react-router";
import SyntaxHighlighter from "react-syntax-highlighter";
/* tslint:disable-next-line no-submodule-imports
 * Disabling this rule is necessary for
 * allowing the import of predefined SyntaxHighlighter styles
 */
import { default as monokaiSublime } from "react-syntax-highlighter/dist/styles/hljs/monokai-sublime";
import { exploitView as ExploitView } from "./index";

configure({ adapter: new ReactSixteenAdapter() });

describe.skip("Exploit view", (): void => {

  const routePropsMock: RouteComponentProps<{ findingId: string }> = {
    history: {
      action: "PUSH",
      block: (): (() => void) => (): void => undefined,
      createHref: (): string => "",
      go: (): void => undefined,
      goBack: (): void => undefined,
      goForward: (): void => undefined,
      length: 1,
      listen: (): (() => void) => (): void => undefined,
      location: {
        hash: "",
        pathname: "/",
        search: "",
        state: {},
      },
      push: (): void => undefined,
      replace: (): void => undefined,
    },
    location: {
      hash: "",
      pathname: "/",
      search: "",
      state: {},
    },
    match: {
      isExact: true,
      params: {
        findingId: "422286126",
      },
      path: "/",
      url: "",
    },
  };

  it("should return a function", (): void => {
    expect(typeof (ExploitView))
      .toEqual("function");
  });

  it("should render", (): void => {
    const wrapper: ShallowWrapper = shallow(
      <ExploitView
        {...routePropsMock}
      />,
    );
    expect(
      wrapper.contains(
        <SyntaxHighlighter style={monokaiSublime} language="python" showLineNumbers={true} wrapLines={true}>
          print 'unit test'
        </SyntaxHighlighter>,
      ),
    )
      .toEqual(true);
  });

  it("should render as editable", (): void => {
    const handleEditClick: jest.Mock = jest.fn();

    const wrapper: ShallowWrapper = shallow(
      <ExploitView
        {...routePropsMock}
      />,
    );
    const editButton: ShallowWrapper = wrapper.find("button")
      .findWhere((element: ShallowWrapper) => element.contains("Edit"))
      .at(0);
    expect(editButton)
      .toHaveLength(1);
    editButton.simulate("click");
    expect(handleEditClick.mock.calls.length)
      .toEqual(1);
  });

  it("should render as readonly", (): void => {
    const wrapper: ShallowWrapper = shallow(
      <ExploitView
        {...routePropsMock}
      />,
    );
    expect(wrapper.find("button")
      .findWhere((element: ShallowWrapper) => element.contains("Edit"))
      .at(0))
      .toHaveLength(0);
  });

  it("should render upload field", (): void => {
    const wrapper: ShallowWrapper = shallow(
      <ExploitView
        {...routePropsMock}
      />,
    );
    expect(wrapper.find("button")
      .findWhere((element: ShallowWrapper) => element.contains("Update"))
      .at(0))
      .toHaveLength(1);
  });

  it("should change edit mode", (): void => {

    const wrapper: ShallowWrapper = shallow(
      <ExploitView
        {...routePropsMock}
      />,
    );
    expect(wrapper.find("button")
      .findWhere((element: ShallowWrapper) => element.contains("Update"))
      .at(0))
      .toHaveLength(0);
    wrapper.setProps({ isEditing: true });
    expect(wrapper.find("button")
      .findWhere((element: ShallowWrapper) => element.contains("Update"))
      .at(0))
      .toHaveLength(1);
  });

  it("should render after update", (): void => {

    const wrapper: ShallowWrapper = shallow(
      <ExploitView
        {...routePropsMock}
      />,
    );
    expect(wrapper.find("SyntaxHighlighter")
      .prop("children"))
      .toEqual("print 'unit test'");
    wrapper.setProps({ code: "print 'changed'" });
    expect(wrapper.find("SyntaxHighlighter")
      .prop("children"))
      .toEqual("print 'changed'");
  });
});

/* tslint:disable:jsx-no-multiline-js
 *
 * Disabling this rule is necessary for accessing render props from
 * apollo components
 */
import _ from "lodash";
import mixpanel from "mixpanel-browser";
import React from "react";
import { Query, QueryResult } from "react-apollo";
import { Col, Glyphicon, Row } from "react-bootstrap";
import { connect, ConnectedComponent, MapDispatchToProps } from "react-redux";
import { RouteComponentProps } from "react-router";
import SyntaxHighlighter from "react-syntax-highlighter";
// tslint:disable-next-line no-submodule-imports
import { default as monokaiSublime } from "react-syntax-highlighter/dist/styles/hljs/monokai-sublime";
import { Button } from "../../../../components/Button/index";
import { FluidIcon } from "../../../../components/FluidIcon";
import translate from "../../../../utils/translations/translate";
import { isValidEvidenceFile } from "../../../../utils/validations";
import { FileInput } from "../../components/FileInput/index";
import { ThunkDispatcher, updateExploit } from "./actions";
import { GET_FINDING_EXPLOIT } from "./queries";

type IExploitViewBaseProps = RouteComponentProps<{ findingId: string }>;

interface IExploitViewDispatchProps {
  onUpdate(): void;
}

type IExploitViewProps = IExploitViewBaseProps & IExploitViewDispatchProps;

const renderUploadField: ((props: IExploitViewProps) => JSX.Element) = (props: IExploitViewProps): JSX.Element => {
  const handleUploadClick: (() => void) = (): void => {
    if (isValidEvidenceFile("#evidence7")) {
      mixpanel.track("UpdateExploit", {
        Organization: (window as Window & { userOrganization: string }).userOrganization,
        User: (window as Window & { userName: string }).userName,
      });
      props.onUpdate();
    }
  };

  return (
    <Row>
      <Col md={4} mdOffset={6} xs={12} sm={12}>
        <div>
          <FileInput icon="search" id="evidence7" type=".py, .exp" visible={true} />
        </div>
      </Col>
      <Col sm={2}>
        <Button bsStyle="primary" block={true} onClick={handleUploadClick}>
          <Glyphicon glyph="cloud-upload" />
          &nbsp;{translate.t("search_findings.tab_evidence.update")}
        </Button>
      </Col>
    </Row>
  );
};

export const exploitView: React.FunctionComponent<IExploitViewProps> = (props: IExploitViewProps): JSX.Element => {
  const { findingId } = props.match.params;

  const onMount: (() => void) = (): void => {
    mixpanel.track("FindingExploit", {
      Organization: (window as Window & { userOrganization: string }).userOrganization,
      User: (window as Window & { userName: string }).userName,
    });
  };
  React.useEffect(onMount, []);

  const [isEditing, setEditing] = React.useState(false);
  const handleEditClick: (() => void) = (): void => { setEditing(!isEditing); };

  return (
    <React.StrictMode>
      <Query query={GET_FINDING_EXPLOIT} variables={{ findingId }}>
        {({ data, loading }: QueryResult): JSX.Element => {
          if (_.isUndefined(data) || loading) { return <React.Fragment />; }

          const { userRole } = (window as typeof window & { userRole: string });
          const canEdit: boolean = _.includes(["admin", "analyst"], userRole);

          return (
            <React.Fragment>
              <Row>
                <Col md={2} mdOffset={10} xs={12} sm={12}>
                  {canEdit ? (
                    <Button block={true} onClick={handleEditClick}>
                      <FluidIcon icon="edit" />&nbsp;{translate.t("search_findings.tab_severity.editable")}
                    </Button>
                  ) : undefined}
                </Col>
              </Row>
              <br />
              {isEditing ? renderUploadField(props) : undefined}
              <SyntaxHighlighter style={monokaiSublime} language="python" showLineNumbers={true} wrapLines={true}>
                {data.finding.exploit}
              </SyntaxHighlighter>
            </React.Fragment>
          );
        }}
      </Query>
    </React.StrictMode>
  );
};

const mapDispatchToProps: MapDispatchToProps<IExploitViewDispatchProps, IExploitViewBaseProps> =
  (dispatch: ThunkDispatcher, ownProps: IExploitViewBaseProps): IExploitViewDispatchProps => {
    const { findingId } = ownProps.match.params;

    return ({
      onUpdate: (): void => { dispatch(updateExploit(findingId)); },
    });
  };

const connectedExploitView: ConnectedComponent<React.ComponentType<IExploitViewProps>, IExploitViewBaseProps> =
  connect(undefined, mapDispatchToProps)(exploitView);

export { connectedExploitView as ExploitView };

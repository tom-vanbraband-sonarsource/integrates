import _ from "lodash";
import mixpanel from "mixpanel-browser";
import React from "react";
import { Col, Glyphicon, Row } from "react-bootstrap";
import { connect, ConnectedComponent, MapDispatchToProps, MapStateToProps } from "react-redux";
import { RouteComponentProps } from "react-router";
import SyntaxHighlighter from "react-syntax-highlighter";
// tslint:disable-next-line no-submodule-imports
import { default as monokaiSublime } from "react-syntax-highlighter/dist/styles/hljs/monokai-sublime";
import { Button } from "../../../../components/Button/index";
import { FluidIcon } from "../../../../components/FluidIcon";
import translate from "../../../../utils/translations/translate";
import { isValidEvidenceFile } from "../../../../utils/validations";
import { FileInput } from "../../components/FileInput/index";
import { IDashboardState } from "../../reducer";
import { editExploit, loadExploit, ThunkDispatcher, updateExploit } from "./actions";

type IExploitViewBaseProps = Pick<RouteComponentProps<{ findingId: string }>, "match">;

type IExploitViewStateProps = IDashboardState["exploit"] & { userRole: string };

interface IExploitViewDispatchProps {
  onEdit(): void;
  onLoad(): void;
  onUpdate(): void;
}

type IExploitViewProps = IExploitViewBaseProps & (IExploitViewStateProps & IExploitViewDispatchProps);

const renderUploadField: ((props: IExploitViewProps) => JSX.Element) = (props: IExploitViewProps): JSX.Element => {
  const handleUploadClick: (() => void) = (): void => {
    if (isValidEvidenceFile("#evidence7")) {
      mixpanel.track("UpdateExploit", {
        Organization: (window as Window & { userOrganization: string }).userOrganization,
        User: (window as Window & { userName: string }).userName,
      });
      props.onUpdate();
    }
  };

  return (
    <Row>
      <Col md={4} mdOffset={6} xs={12} sm={12}>
        <div>
          <FileInput icon="search" id="evidence7" type=".py, .exp" visible={true} />
        </div>
      </Col>
      <Col sm={2}>
        <Button bsStyle="primary" block={true} onClick={handleUploadClick}>
          <Glyphicon glyph="cloud-upload" />
          &nbsp;{translate.t("search_findings.tab_evidence.update")}
        </Button>
      </Col>
    </Row>
  );
};

const renderEditPanel: ((props: IExploitViewProps) => JSX.Element) = (props: IExploitViewProps): JSX.Element => {
  const handleEditClick: (() => void) = (): void => { props.onEdit(); };

  return (
    <Row>
      <Row>
        <Col md={2} mdOffset={10} xs={12} sm={12}>
          <Button bsStyle="primary" block={true} onClick={handleEditClick}>
            <FluidIcon icon="edit" /> {translate.t("search_findings.tab_severity.editable")}
          </Button>
        </Col>
      </Row>
      <br />
      {props.isEditing ? renderUploadField(props) : undefined}
    </Row>
  );
};

export const exploitView: React.FunctionComponent<IExploitViewProps> = (props: IExploitViewProps): JSX.Element => {
  const onMount: (() => void) = (): void => {
    mixpanel.track("FindingExploit", {
      Organization: (window as Window & { userOrganization: string }).userOrganization,
      User: (window as Window & { userName: string }).userName,
    });
    props.onLoad();
  };
  React.useEffect(onMount, []);

  return (
    <React.StrictMode>
      {_.includes(["admin", "analyst"], props.userRole) ? renderEditPanel(props) : undefined}
      <SyntaxHighlighter style={monokaiSublime} language="python" showLineNumbers={true} wrapLines={true}>
        {props.code}
      </SyntaxHighlighter>
    </React.StrictMode>
  );
};

interface IState { dashboard: IDashboardState; }
const mapStateToProps: MapStateToProps<IExploitViewStateProps, IExploitViewBaseProps, IState> =
  (state: IState): IExploitViewStateProps => ({
    ...state.dashboard.exploit,
    userRole: (window as Window & { userRole: string }).userRole,
  });

const mapDispatchToProps: MapDispatchToProps<IExploitViewDispatchProps, IExploitViewBaseProps> =
  (dispatch: ThunkDispatcher, ownProps: IExploitViewBaseProps): IExploitViewDispatchProps => {
    const { findingId } = ownProps.match.params;

    return ({
      onEdit: (): void => { dispatch(editExploit()); },
      onLoad: (): void => { dispatch(loadExploit(findingId)); },
      onUpdate: (): void => { dispatch(updateExploit(findingId)); },
    });
  };

const connectedExploitView: ConnectedComponent<React.ComponentType<IExploitViewProps>, IExploitViewBaseProps> =
  connect(mapStateToProps, mapDispatchToProps)(exploitView);

export { connectedExploitView as ExploitView };

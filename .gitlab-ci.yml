image: registry.gitlab.com/fluidsignal/default/integrates/deps:ci

.vault_vars:
  variables:
    VAULT_ADDR: "https://${VAULT_S3_BUCKET}.com"
    VAULT_HOST: "${VAULT_S3_BUCKET}.com"
    VAULT_PORT: 443
    VAULTENV_SECRETS_FILE: "${CI_PROJECT_DIR}/env.vars"
    ENV: DEV
    ENV_NAME: development
    ROLE_ID: "${INTEGRATES_DEV_ROLE_ID}"
    SECRET_ID: "${INTEGRATES_DEV_SECRET_ID}"

.registry_vars: &registry_vars
  variables:
    CI_REGISTRY_USER: "${GITLAB_USER}"
    CI_REGISTRY_PASSWORD: "${GITLAB_PASS}"
    CI_REGISTRY_EMAIL: "${GITLAB_EMAIL}"
    CI_REGISTRY_IMAGE: "${CI_REGISTRY}/fluidsignal/default/integrates"

.vault_setup: &vault_setup |-
  if [ "${CI_COMMIT_REF_NAME}" == "master" ]; then
    export ENV=PROD
    export ENV_NAME=production
    export ROLE_ID="${INTEGRATES_PROD_ROLE_ID}"
    export SECRET_ID="${INTEGRATES_PROD_SECRET_ID}"
  fi
  sed -i 's#/env#/'"${ENV_NAME}"'#g' "${VAULTENV_SECRETS_FILE}"
  export VAULT_TOKEN=$(vault write \
    -field=token auth/approle/login \
    role_id="${ROLE_ID}" \
    secret_id="${SECRET_ID}")

.vault_login: &vault_login
  extends: .vault_vars
  before_script:
    - *vault_setup

.kaniko_config: &kaniko_config
  <<: *registry_vars
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - echo '{"auths":{"'"${CI_REGISTRY}"'":{"username":"'"${CI_REGISTRY_USER}"'","password":"'"${CI_REGISTRY_PASSWORD}"'"}}}'
        > /kaniko/.docker/config.json

.kaniko_vault_config: &kaniko_vault_config
  extends: .vault_vars
  <<: *kaniko_config
  before_script:
    - wget -O vault.zip https://releases.hashicorp.com/vault/0.11.6/vault_0.11.6_linux_amd64.zip;
        unzip vault.zip;
        mv vault /busybox/
    - *vault_setup
    - export FI_DRIVE_AUTHORIZATION=$(vault read -field=drive_authorization secret/integrates/${ENV_NAME})
    - export FI_DRIVE_AUTHORIZATION_CLIENT=$(vault read -field=drive_authorization_client secret/integrates/${ENV_NAME})
    - export FI_DOCUMENTROOT=$(vault read -field=documentroot secret/integrates/${ENV_NAME})
    - export FI_SSL_KEY=$(vault read -field=ssl_key secret/integrates/${ENV_NAME})
    - export FI_SSL_CERT=$(vault read -field=ssl_cert secret/integrates/${ENV_NAME})
    - echo '{"auths":{"'"${CI_REGISTRY}"'":{"username":"'"${CI_REGISTRY_USER}"'","password":"'"${CI_REGISTRY_PASSWORD}"'"}}}'
        > /kaniko/.docker/config.json

.ci_utils: &ci_utils |-
  function skip_if_unchanged() {
    if (git diff origin/master HEAD --dirstat | grep -iq "$1") || [ "${CI_COMMIT_REF_NAME}" == "master" ]; then
      SKIP_JOB=0;
    else
      echo "Directory $1 unchanged. Skipping job >>>"
      SKIP_JOB=1;
    fi
    export SKIP_JOB
  };

stages:
  - deps
  - pre-test
  - build
  - mr-check
  - deploy
  - post-deploy
  - coverage

build-mobile:
  tags:
  - mobile
  stage: deps
  image: fluidattacks/alpine-kaniko:latest
  retry: 2
  script:
    - ./ci-scripts/jobs/build-mobile.sh

deps-app:
  stage: deps
  <<: *kaniko_config
  script:
    - mkdir deploy/containers/deps/front
    - mkdir deploy/containers/deps/mobile
    - cp -a front/package.json deploy/containers/deps/front/
    - cp -a mobile/package.json deploy/containers/deps/mobile/
    - /kaniko/executor
        --cleanup
        --context "${CI_PROJECT_DIR}/deploy/containers/deps/"
        --dockerfile "${CI_PROJECT_DIR}/deploy/containers/deps/Dockerfile.app"
        --destination "${CI_REGISTRY_IMAGE}/deps:app"
        --single-snapshot
        --snapshotMode time
        --verbosity warn
  retry: 1
  only:
    - schedules

deps-ci:
  tags:
    - mobile
  stage: deps
  <<: *kaniko_config
  script:
    - mkdir deploy/containers/deps/front
    - mkdir deploy/containers/deps/mobile
    - cp -a front/package.json deploy/containers/deps/front/
    - cp -a mobile/package.json deploy/containers/deps/mobile/
    - /kaniko/executor
        --cleanup
        --context "${CI_PROJECT_DIR}/deploy/containers/deps/"
        --dockerfile "${CI_PROJECT_DIR}/deploy/containers/deps/Dockerfile.ci"
        --destination "${CI_REGISTRY_IMAGE}/deps:ci"
        --single-snapshot
        --snapshotMode time
        --verbosity warn
  retry: 1
  only:
    - schedules

test-terraform:
  stage: pre-test
  image: registry.gitlab.com/fluidsignal/serves:builder
  <<: *vault_login
  script:
    - ./ci-scripts/jobs/test-terraform.sh
  artifacts:
    paths:
      - plan.txt
    expire_in: 1h
    when: on_success
  only:
    - branches
    - merge_requests
  except:
    - master

front-compiler:
  stage: pre-test
  script:
    - cp -a /root/front/node_modules front/
    - cd front
    - npm install --unsafe-perm
    - npm run build:prod
  artifacts:
    paths:
      - app/assets/dashboard/*
    expire_in: 1h
  retry: 1

commitlint:
  stage: pre-test
  image: starefossen/ruby-node:2-10
  script:
    - npm install --unsafe-perm
    - ./ci-scripts/jobs/commitlint.sh
  except:
    - master

test-front:
  stage: pre-test
  script:
    - cp -a /root/front/node_modules front/
    - cd front
    - npm install --unsafe-perm
    - npm run audit
    - npm run lint
    - npm run test
  artifacts:
    name: "coverage_lcov_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - front/coverage.lcov
    expire_in: 1 week
  only:
    - branches
    - merge_requests
  except:
    - master

test-mobile:
  stage: pre-test
  image: registry.gitlab.com/fluidattacks/integrates:mobile
  script:
    - cd mobile
    - cp -a /usr/src/app/node_modules .
    - npm install
    - npm run lint
    - npm test

test-prospector:
  stage: pre-test
  <<: *vault_login
  script:
    - vaultenv -- prospector -F -s veryhigh -u django -p app/ -i node_modules || true
    - vaultenv -- prospector -F -s high -u django -p app/ -i node_modules
    - vaultenv -- prospector -F -s veryhigh -u django fluidintegrates/
  except:
    - master

test-unit:
  stage: pre-test
  <<: *vault_login
  script:
    - cp -a $PWD /usr/src/app_src
    - cd /usr/src/app_src
    - service redis-server start
    - vaultenv -- pytest --ds=fluidintegrates.settings --verbose --exitfirst
        --cov=fluidintegrates --cov=app --cov-report term
        --cov-report html:build/coverage/html
        --cov-report xml:build/coverage/results.xml
        --cov-report annotate:build/coverage/annotate
        --basetemp=build/test
        --junitxml=build/test/results.xml
        app/tests.py
    - cp -a build/coverage/results.xml "${CI_PROJECT_DIR}/coverage.xml"
  artifacts:
    name: "coverage_xml_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - coverage.xml
    expire_in: 1 week
  only:
    - branches
    - merge_requests
  except:
    - master

build-terraform:
  stage: build
  image: registry.gitlab.com/fluidsignal/serves:builder
  <<: *vault_login
  script:
    - ./ci-scripts/jobs/build-terraform.sh
  only:
    - master

build-app:
  stage: build
  dependencies:
    - front-compiler
  <<: *kaniko_vault_config
  script:
    - mv app/assets/dashboard deploy/containers/app
    - MINUTES=$((
        ($(date +%d | sed 's/^0//') -1) * 1440 +
        $(date +%H | sed 's/^0//') * 60 +
        $(date +%M | sed 's/^0//')
      ))
    - FI_VERSION="$(date +%y.%m.)${MINUTES}"
    - echo -n "${FI_VERSION}" > version.txt
    - /kaniko/executor
        --build-arg CI_API_V4_URL="${CI_API_V4_URL}"
        --build-arg CI_COMMIT_REF_NAME="${CI_COMMIT_REF_NAME}"
        --build-arg CI_PROJECT_ID="${CI_PROJECT_ID}"
        --build-arg CI_REPOSITORY_URL="${CI_REPOSITORY_URL}"
        --build-arg DOCUMENTROOT="${FI_DOCUMENTROOT}"
        --build-arg DRIVE_AUTHORIZATION="${FI_DRIVE_AUTHORIZATION}"
        --build-arg DRIVE_AUTHORIZATION_CLIENT="${FI_DRIVE_AUTHORIZATION_CLIENT}"
        --build-arg ENV_NAME="${ENV_NAME}"
        --build-arg SSL_CERT="${FI_SSL_CERT}"
        --build-arg SSL_KEY="${FI_SSL_KEY}"
        --build-arg VERSION="${FI_VERSION}"
        --cleanup
        --context "${CI_PROJECT_DIR}/deploy/containers/app/"
        --dockerfile "${CI_PROJECT_DIR}/deploy/containers/app/Dockerfile"
        --destination "${CI_REGISTRY_IMAGE}/app:${CI_COMMIT_REF_NAME}"
        --single-snapshot
        --snapshotMode time
        --verbosity warn
  retry: 1
  artifacts:
    expire_in: 30m
    paths:
      - version.txt
    when: on_success

build-bot:
  stage: build
  <<: *kaniko_vault_config
  script:
    - /kaniko/executor
        --build-arg CI_API_V4_URL="${CI_API_V4_URL}"
        --build-arg CI_COMMIT_REF_NAME="${CI_COMMIT_REF_NAME}"
        --build-arg CI_PROJECT_ID="${CI_PROJECT_ID}"
        --build-arg ENV_NAME="${ENV_NAME}"
        --cleanup
        --context "${CI_PROJECT_DIR}/deploy/containers/bot/"
        --dockerfile "${CI_PROJECT_DIR}/deploy/containers/bot/Dockerfile"
        --destination "${CI_REGISTRY_IMAGE}/bot:${CI_COMMIT_REF_NAME}"
        --single-snapshot
        --snapshotMode time
        --verbosity warn
  retry: 1

test-driver:
  stage: post-deploy
  <<: *vault_login
  script:
    - cp -a $PWD /usr/src/app_src
    - cd /usr/src/app_src
    - mkdir -p screenshots
    - vaultenv -- pytest
        --ds=fluidintegrates.settings
        --verbose
        --exitfirst
        --basetemp=build/test
        --test-group-count "${CI_NODE_TOTAL}"
        --test-group "${CI_NODE_INDEX}"
        app/ephimeral_tests.py
    - cp -a screenshots "${CI_PROJECT_DIR}"
  parallel: 3
  retry: 1
  artifacts:
    name: "regression_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - screenshots/

ephemeral-app:
  stage: deploy
  image: registry.gitlab.com/fluidsignal/serves:builder
  <<: *vault_login
  script:
    - vaultenv review-apps/cluster-config.sh
  retry: 1
  environment:
    name: "review/$CI_COMMIT_REF_SLUG"
    url: "https://$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME.env.fluidattacks.com/integrates"
    on_stop: stop-ephemeral-app
  except:
    - master

stop-ephemeral-app:
  stage: deploy
  image: registry.gitlab.com/fluidsignal/serves:builder
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  variables:
    GIT_STRATEGY: none
  script:
    - kubectl config set-context
        "$(kubectl config current-context)"
        --namespace="${CI_PROJECT_NAME}"
    - kubectl delete deployment "review-${CI_COMMIT_REF_SLUG}"
    - kubectl delete service "service-${CI_COMMIT_REF_SLUG}"
    - kubectl delete ingress "review-${CI_COMMIT_REF_SLUG}"
  retry: 1
  when: manual
  except:
    - master

asserts-static:
  stage: pre-test
  image: fluid-docker.jfrog.io/fluid:integrates_static
  retry: 1
  variables:
    BRANCH: "${CI_COMMIT_REF_NAME}"
    FA_STRICT: "true"
    ORG: "fluid"
    PASS: "${INTEGRATES_JFROG_PASS}"
    USER: "${INTEGRATES_JFROG_USER}"
  script:
    - cp -a ./* /code/
    - /entrypoint.sh
  except:
    - master

asserts-dynamic:
  stage: post-deploy
  image: fluid-docker.jfrog.io/fluid:integrates_dynamic
  retry: 1
  variables:
    BRANCH: "${CI_COMMIT_REF_NAME}"
    FA_STRICT: "true"
    ORG: "fluid"
    PASS: "${INTEGRATES_JFROG_PASS}"
    USER: "${INTEGRATES_JFROG_USER}"
  script:
    - ./ci-scripts/jobs/asserts-dynamic.sh
  only:
    - master

mr-test:
  stage: mr-check
  variables:
    GIT_STRATEGY: clone
  script:
    ./ci-scripts/check-branch.sh
  only:
    - merge_request3.86.193.211s

danger:
  stage: mr-check
  image: starefossen/ruby-node:2-10
  dependencies:
    - test-terraform
  script:
    - ./ci-scripts/jobs/danger.sh
  only:
    - merge_requests

deploy-k8s:
  stage: deploy
  image: registry.gitlab.com/fluidsignal/serves:builder
  environment:
    name: "production"
    url: "https://fluidattacks.com/integrates"
  <<: *vault_login
  script:
    - kubectl config set-context "$(kubectl config current-context)"
        --namespace serves
    - if ! kubectl get secret gitlab-reg; then
        echo "Creating secret to access Gitlab Registry...";
        kubectl create secret docker-registry gitlab-reg
          --docker-server="${CI_REGISTRY}" --docker-username="${GITLAB_USER}"
          --docker-password="${GITLAB_PASS}" --docker-email="${GITLAB_EMAIL}";
      fi
    - sed -i 's/$VAULT_HOST/'"$(echo -n $VAULT_HOST | base64)"'/;
        s/$VAULT_TOKEN/'"$(echo -n $VAULT_TOKEN | base64)"'/;
        s/$DATE/'"$(date)"'/g'
        integrates-k8s.yaml
    - kubectl apply -f integrates-k8s.yaml
    - kubectl rollout status deploy/integrates --timeout=5m ||
        { kubectl rollout undo deploy/integrates && exit 1; }
    - kubectl rollout status deploy/integrates-bot --timeout=5m ||
        { kubectl rollout undo deploy/integrates-bot && exit 1; }
    - curl https://api.rollbar.com/api/1/deploy/
        -F access_token=$ROLLBAR_ACCESS_TOKEN
        -F environment=$FI_ROLLBAR_ENVIRONMENT
        -F revision=$CI_COMMIT_SHA
        -F local_username="$CI_COMMIT_REF_NAME"
    - vaultenv ./new_relic_deployment.sh
  after_script:
    - rm integrates-k8s.yaml
  only:
    - master

deploy-mobile:
  stage: deploy
  <<: *vault_login
  script:
    - *ci_utils
    - cd mobile/
    - cp -a /root/mobile/node_modules ./
    - skip_if_unchanged mobile/
    - if [ $SKIP_JOB -eq 0 ]; then npm install; npm run publish; fi;
  environment:
    name: "mobile-review/$CI_COMMIT_REF_NAME"
    url: "https://expo.io/@developmentatfluid/integrates?release-channel=$CI_COMMIT_REF_NAME"

.deploy-playstore:
  stage: deploy
  dependencies:
    - build-mobile
  <<: *vault_login
  script:
    - cd mobile/
    - echo "$(
        vault read -field=playstore_credentials secret/integrates/production
      )" > playstore-credentials.json
    - bundle install
    - bundle exec fastlane supply
      --aab ./output/integrates.aab
      --json_key ./playstore-credentials.json
      --package_name "com.fluidattacks.integrates"
      --track "$MOBILE_RELEASE_CHANNEL"
  after_script:
    - rm mobile/playstore-credentials.json
  allow_failure: true
  only:
    - master

new-version-mail:
  stage: post-deploy
  dependencies:
    - build-app
  <<: *vault_login
  script:
    - export DJANGO_SETTINGS_MODULE=fluidintegrates.settings
    - vaultenv -- python integrates_version.py
  only:
    - master
  except:
    - schedules

coverage-report:
  stage: coverage
  dependencies:
    - test-unit
    - test-front
  <<: *vault_login
  script:
    - vaultenv ./run_codecov.sh
  retry: 1
  only:
    - merge_requests
  except:
    - master

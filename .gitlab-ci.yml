stages:
  - deps
  - rotation
  - build
  - lint-code
  - test-code
  - test-infra
  - merge-request
  - deploy-infra
  - deploy-app
  - post-deploy

.in_branches_and_mrs: &in_branches_and_mrs
  only:
    - branches
    - merge_requests

.in_dev_branch: &in_dev_branch
  except:
    refs:
      - master
      - merge_requests
      - schedules
      - triggers

.in_dev_branch_and_mrs: &in_dev_branch_and_mrs
  only:
    - branches
    - merge_requests
  except:
    - master
    - schedules
    - triggers

.in_dev_and_master_branch: &in_dev_and_master_branch
  except:
    refs:
      - schedules
      - triggers

.in_master_branch: &in_master_branch
  only:
    refs:
      - master
  except:
    refs:
      - schedules
      - triggers

.in_master_branch_and_schedules: &in_master_branch_and_schedules
  only:
    refs:
      - master
  except:
    refs:
      - triggers

.in_master_branch_and_schedules_and_triggers: &in_master_branch_and_schedules_and_triggers
  only:
    refs:
      - master

.in_mrs: &in_mrs
  only:
    refs:
      - merge_requests
  except:
    refs:
      - branches
      - triggers
      - schedules

.in_schedule_nightly_build: &in_schedule_nightly_build
  only:
    refs:
      - schedules
    variables:
      - $NIGHTLY_BUILD

.with_nix: &with_nix
  tags: [autoscaling]
  image: "${CI_REGISTRY_IMAGE}/nix:full"
  needs: []
  script:
    - ./build.sh "${CI_JOB_NAME% *}"
  interruptible: true

build_front:
  <<: *with_nix
  image: "${CI_REGISTRY_IMAGE}/nix:build"
  stage: build
  retry: 1
  artifacts:
    expire_in: 1 day
    paths:
      - app/assets/
    when: on_success

build_lambdas:
  <<: *with_nix
  <<: *in_dev_and_master_branch
  image: "${CI_REGISTRY_IMAGE}/nix:build"
  stage: build
  artifacts:
    expire_in: 1 day
    paths:
      - lambda/packages/
    when: on_success

coverage_report:
  <<: *with_nix
  <<: *in_mrs
  stage: merge-request
  retry: 1

clean_registries:
  <<: *with_nix
  <<: *in_schedule_nightly_build
  stage: post-deploy

deploy_k8s_back_ephemeral:
  <<: *with_nix
  <<: *in_dev_branch
  image: "${CI_REGISTRY_IMAGE}/nix:infra"
  stage: deploy-app
  needs: [deploy_container_app]
  retry: 1
  environment:
    name: "review/$CI_COMMIT_REF_SLUG"
    url: "https://$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME.env.fluidattacks.com/integrates"
    on_stop: deploy_k8s_stop_ephemeral

deploy_k8s_back:
  <<: *with_nix
  <<: *in_master_branch_and_schedules_and_triggers
  image: "${CI_REGISTRY_IMAGE}/nix:infra"
  stage: deploy-app
  needs: [deploy_container_app]
  retry: 1
  environment:
    name: "production"
    url: "https://fluidattacks.com/integrates"

deploy_k8s_stop_ephemeral:
  <<: *with_nix
  <<: *in_dev_branch
  stage: deploy-app
  retry: 1
  when: manual
  environment:
    name: "review/$CI_COMMIT_REF_SLUG"
    action: stop

deploy_mobile:
  <<: *with_nix
  image: "${CI_REGISTRY_IMAGE}/nix:deploy-mobile"
  stage: deploy-app
  tags: [autoscaling-large]
  needs: [deploy_container_deps_mobile]
  environment:
    name: "mobile-review/$CI_COMMIT_REF_NAME"
    url: "https://expo.io/@developmentatfluid/integrates?release-channel=$CI_COMMIT_REF_NAME"

deploy_container_deps_mobile:
  <<: *with_nix
  image: "${CI_REGISTRY_IMAGE}/nix:docker"
  tags: [autoscaling-large]
  stage: deps

deploy_container_app:
  <<: *with_nix
  image: "${CI_REGISTRY_IMAGE}/nix:build-and-docker"
  stage: deps
  script:
    - ./build.sh build_django_apps
    - ./build.sh deploy_container_deps_app
    - ./build.sh deploy_container_app
  retry: 1
  artifacts:
    expire_in: 1 day
    paths:
      - version.txt
      - django-apps/packages/
    when: on_success

deploy_container_app_async:
  <<: *with_nix
  <<: *in_dev_and_master_branch
  image: "${CI_REGISTRY_IMAGE}/nix:docker"
  stage: build
  needs:
    - deploy_container_app
  retry: 1
  artifacts:
    expire_in: 1 day
    paths:
    - version.txt
    when: on_success

deploy_container_nix_caches:
  <<: *with_nix
  <<: *in_schedule_nightly_build
  tags: [autoscaling-large]
  image: nixos/nix:2.3
  stage: deploy-infra
  before_script:
    - apk add --no-cache bash

deploy_front:
  <<: *with_nix
  image: "${CI_REGISTRY_IMAGE}/nix:deploy-front"
  stage: deploy-app
  needs: [build_front]

.functional_tests_template: &functional_tests_template
  <<: *with_nix
  image: "${CI_REGISTRY_IMAGE}/nix:selenium"
  stage: post-deploy
  retry: 1
  parallel: 14
  artifacts:
    name: "regression_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - screenshots/
    when: always

functional_tests_dev:
  <<: *functional_tests_template
  <<: *in_dev_branch
  needs:
    - deploy_k8s_back_ephemeral
    - deploy_front

functional_tests_prod:
  <<: *functional_tests_template
  <<: *in_master_branch
  needs:
    - deploy_k8s_back
    - deploy_front

infra_backup_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy-infra

infra_backup_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch
  stage: test-infra

infra_cache_db_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy-infra

infra_cache_db_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch
  stage: test-infra

infra_django_db_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy-infra

infra_django_db_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch
  stage: test-infra

infra_resources_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy-infra

infra_resources_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch
  stage: test-infra

infra_secret_management_deploy:
  <<: *with_nix
  <<: *in_master_branch
  stage: deploy-infra

infra_secret_management_test:
  <<: *with_nix
  <<: *in_dev_and_master_branch
  stage: test-infra

lint_back:
  <<: *with_nix
  <<: *in_dev_branch
  stage: lint-code

lint_front:
  <<: *with_nix
  <<: *in_dev_branch
  stage: lint-code

lint_build_system:
  <<: *with_nix
  <<: *in_dev_branch
  stage: lint-code

lint_mobile:
  <<: *with_nix
  <<: *in_dev_branch
  stage: lint-code

renew_certificates:
  <<: *with_nix
  <<: *in_schedule_nightly_build
  stage: post-deploy
  environment:
    name: "review/renew-review-cert"
    auto_stop_in: 1 hour

rotate_jwt_token:
  <<: *with_nix
  <<: *in_schedule_nightly_build
  stage: rotation

send_new_release_email:
  <<: *with_nix
  <<: *in_master_branch
  stage: post-deploy
  needs:
    - deploy_k8s_back

test_back:
  <<: *with_nix
  <<: *in_dev_branch_and_mrs
  image: "${CI_REGISTRY_IMAGE}/nix:test"
  stage: test-code
  retry: 1
  artifacts:
    name: "coverage_xml_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - coverage.xml
    expire_in: 1 week

test_back_async:
  <<: *with_nix
  <<: *in_dev_branch
  image: "${CI_REGISTRY_IMAGE}/nix:test"
  stage: test-code
  retry: 1

test_front:
  <<: *with_nix
  <<: *in_dev_branch_and_mrs
  image: "${CI_REGISTRY_IMAGE}/nix:test"
  stage: test-code
  artifacts:
    name: "coverage_lcov_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHA:0:8}"
    paths:
      - front/coverage.lcov
    expire_in: 1 week

test_mobile:
  <<: *with_nix
  <<: *in_dev_branch
  image: "${CI_REGISTRY_IMAGE}/nix:test"
  stage: test-code

forces_static:
  stage: test-code
  tags: [autoscaling]
  needs: []
  image:
    name: fluidattacks/break-build
    entrypoint: [""]
  before_script:
    - docker pull fluidattacks/break-build
  script:
    - bash <(docker run fluidattacks/break-build
              --static
              --id ${FORCES_ID}
              --secret ${FORCES_SECRET}
              --gitlab-docker-socket-binding
             ) || true
  except:
    - master
  interruptible: true
  <<: *in_dev_and_master_branch

forces_dynamic:
  stage: post-deploy
  tags: [autoscaling]
  needs: []
  image:
    name: fluidattacks/break-build
    entrypoint: [""]
  before_script:
    - docker pull fluidattacks/break-build
  script:
    - bash <(docker run fluidattacks/break-build
              --dynamic
              --id ${FORCES_ID}
              --secret ${FORCES_SECRET}
              --gitlab-docker-socket-binding
             )
  interruptible: true
  <<: *in_master_branch

lint_commit_msg:
  stage: lint-code
  tags: [autoscaling]
  needs: []
  image: starefossen/ruby-node:2-10
  script:
    - npm install --unsafe-perm
    - ./ci-scripts/jobs/commitlint.sh
  <<: *in_dev_branch

danger:
  stage: merge-request
  tags: [autoscaling]
  image: fluidattacks/danger-ruby
  script:
    - ./ci-scripts/jobs/danger.sh
  <<: *in_mrs
